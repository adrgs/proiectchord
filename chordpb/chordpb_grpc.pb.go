// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: chordpb/chordpb.proto

package chordpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChordServiceClient is the client API for ChordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChordServiceClient interface {
	FindSuccessor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error)
	FindPredecessor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error)
	ClosestPrecedingFinger(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error)
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nil, error)
	UpdateFingerTable(ctx context.Context, in *UFTRequest, opts ...grpc.CallOption) (*Nil, error)
	GetSuccessor(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Node, error)
	GetPredecessor(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Node, error)
	SetSuccessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nil, error)
	SetPredecessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nil, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*Nil, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileReply, error)
	StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*Nil, error)
}

type chordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChordServiceClient(cc grpc.ClientConnInterface) ChordServiceClient {
	return &chordServiceClient{cc}
}

func (c *chordServiceClient) FindSuccessor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) FindPredecessor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/FindPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) ClosestPrecedingFinger(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/ClosestPrecedingFinger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) UpdateFingerTable(ctx context.Context, in *UFTRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/UpdateFingerTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) GetSuccessor(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/GetSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) GetPredecessor(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/GetPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) SetSuccessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/SetSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) SetPredecessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/SetPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileReply, error) {
	out := new(GetFileReply)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) StoreFile(ctx context.Context, in *StoreFileRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/chordpb.ChordService/StoreFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServiceServer is the server API for ChordService service.
// All implementations should embed UnimplementedChordServiceServer
// for forward compatibility
type ChordServiceServer interface {
	FindSuccessor(context.Context, *Id) (*Node, error)
	FindPredecessor(context.Context, *Id) (*Node, error)
	ClosestPrecedingFinger(context.Context, *Id) (*Node, error)
	Notify(context.Context, *Node) (*Nil, error)
	UpdateFingerTable(context.Context, *UFTRequest) (*Nil, error)
	GetSuccessor(context.Context, *Nil) (*Node, error)
	GetPredecessor(context.Context, *Nil) (*Node, error)
	SetSuccessor(context.Context, *Node) (*Nil, error)
	SetPredecessor(context.Context, *Node) (*Nil, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	Store(context.Context, *StoreRequest) (*Nil, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileReply, error)
	StoreFile(context.Context, *StoreFileRequest) (*Nil, error)
}

// UnimplementedChordServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChordServiceServer struct {
}

func (UnimplementedChordServiceServer) FindSuccessor(context.Context, *Id) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedChordServiceServer) FindPredecessor(context.Context, *Id) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPredecessor not implemented")
}
func (UnimplementedChordServiceServer) ClosestPrecedingFinger(context.Context, *Id) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosestPrecedingFinger not implemented")
}
func (UnimplementedChordServiceServer) Notify(context.Context, *Node) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedChordServiceServer) UpdateFingerTable(context.Context, *UFTRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFingerTable not implemented")
}
func (UnimplementedChordServiceServer) GetSuccessor(context.Context, *Nil) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessor not implemented")
}
func (UnimplementedChordServiceServer) GetPredecessor(context.Context, *Nil) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (UnimplementedChordServiceServer) SetSuccessor(context.Context, *Node) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSuccessor not implemented")
}
func (UnimplementedChordServiceServer) SetPredecessor(context.Context, *Node) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPredecessor not implemented")
}
func (UnimplementedChordServiceServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedChordServiceServer) Store(context.Context, *StoreRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedChordServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedChordServiceServer) StoreFile(context.Context, *StoreFileRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}

// UnsafeChordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordServiceServer will
// result in compilation errors.
type UnsafeChordServiceServer interface {
	mustEmbedUnimplementedChordServiceServer()
}

func RegisterChordServiceServer(s grpc.ServiceRegistrar, srv ChordServiceServer) {
	s.RegisterService(&ChordService_ServiceDesc, srv)
}

func _ChordService_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).FindSuccessor(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_FindPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).FindPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/FindPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).FindPredecessor(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_ClosestPrecedingFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).ClosestPrecedingFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/ClosestPrecedingFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).ClosestPrecedingFinger(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_UpdateFingerTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).UpdateFingerTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/UpdateFingerTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).UpdateFingerTable(ctx, req.(*UFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_GetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).GetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/GetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).GetSuccessor(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/GetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).GetPredecessor(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_SetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).SetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/SetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).SetSuccessor(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_SetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).SetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/SetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).SetPredecessor(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_StoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).StoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordpb.ChordService/StoreFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).StoreFile(ctx, req.(*StoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChordService_ServiceDesc is the grpc.ServiceDesc for ChordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chordpb.ChordService",
	HandlerType: (*ChordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _ChordService_FindSuccessor_Handler,
		},
		{
			MethodName: "FindPredecessor",
			Handler:    _ChordService_FindPredecessor_Handler,
		},
		{
			MethodName: "ClosestPrecedingFinger",
			Handler:    _ChordService_ClosestPrecedingFinger_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _ChordService_Notify_Handler,
		},
		{
			MethodName: "UpdateFingerTable",
			Handler:    _ChordService_UpdateFingerTable_Handler,
		},
		{
			MethodName: "GetSuccessor",
			Handler:    _ChordService_GetSuccessor_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _ChordService_GetPredecessor_Handler,
		},
		{
			MethodName: "SetSuccessor",
			Handler:    _ChordService_SetSuccessor_Handler,
		},
		{
			MethodName: "SetPredecessor",
			Handler:    _ChordService_SetPredecessor_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ChordService_Get_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _ChordService_Store_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ChordService_GetFile_Handler,
		},
		{
			MethodName: "StoreFile",
			Handler:    _ChordService_StoreFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chordpb/chordpb.proto",
}
